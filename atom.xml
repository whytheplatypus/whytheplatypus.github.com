<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Bits]]></title>
  <link href="http://whytheplatypus.github.com/atom.xml" rel="self"/>
  <link href="http://whytheplatypus.github.com/"/>
  <updated>2013-06-01T22:36:25-04:00</updated>
  <id>http://whytheplatypus.github.com/</id>
  <author>
    <name><![CDATA[David Gage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WeBWorK:AnnArbor DB day one]]></title>
    <link href="http://whytheplatypus.github.com/blog/2013/06/01/webwork-annarbor-db-day-one/"/>
    <updated>2013-06-01T21:14:00-04:00</updated>
    <id>http://whytheplatypus.github.com/blog/2013/06/01/webwork-annarbor-db-day-one</id>
    <content type="html"><![CDATA[<p>Here&#8217;s our board at the end of the day!</p>

<p><img src="https://dl.dropboxusercontent.com/u/3154638/PANO_20130601_154030.jpg"></p>

<p>The group so far is made up of myself, Danny, Eric, Brian, Geoff, Aaron, Mark, and Bill (apologies if I&#8217;ve missed anyone!). We spent the day descussing <a href="http://en.wikipedia.org/wiki/User_story">user stories</a>, mostly back and forth between Danny, Bill, and Aaron, and doing our best to put together some concept of the under-riding data models that make up the atoms of all of these stories.
Some of these stories are up on the <a href="http://webwork.maa.org/wiki/User_Stories">WeBWorK Wiki</a> page with more to come, as soon as people write them. I figured user stories would be useful, but I was still stunned by exactly how helpful they were in staying on track and getting a real grasp of what objects are being dealt with in WeBWorK.</p>

<p>Largely for my own reference this is the basic conceptual model, by Eric, of the portion of WeBWorK&#8217;s architecture that we are working on.
<img src="https://dl.dropboxusercontent.com/u/3154638/DataLayers.png">
At the moment we&#8217;re focused on the &#8220;Model&#8221; part of the structure. Essentially trying to figure out what <em>things</em> are in webwork, what they look like, and some of how they behave.</p>

<p>Below is the outline of our data models so far. Anything ending in <code>()</code> is a behavior of the model, <code>A/B</code> implies a kind of relationship, everything else is an attribute.</p>

<blockquote><ul>
<li><strong>User</strong>

<ul>
<li>username</li>
<li>tags</li>
<li>contact/personal info</li>
<li>password</li>
<li>achievement info</li>
<li>addCourse()</li>
<li>joinTeam(course,teamID)</li>
<li>getTeams()</li>
</ul>
</li>
<li><strong>Course</strong>

<ul>
<li>start date</li>
<li>end date</li>
<li>state [open/closed]</li>
<li>addUser()</li>
<li><em>Course/Participant</em>

<ul>
<li>tags</li>
<li>status [active/inactive]</li>
<li>getSets()</li>
<li>addSet()</li>
<li>description</li>
<li>getType</li>
<li><em>Course/User</em>

<ul>
<li>permisions level</li>
<li>getGrade()</li>
<li>getTeams()</li>
</ul>
</li>
<li><em>Course/Team</em>

<ul>
<li>getMembers()</li>
<li>clone()</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>Set</strong>

<ul>
<li>Descriptive Info</li>
<li>tags</li>
<li>template for versioning</li>
<li>grading scheme</li>
<li>getProblemPoolList() enumerated</li>
<li>versioning information</li>
<li>grading Information</li>
<li><em>Set/Course</em>

<ul>
<li>Due/Assignment/Answer Date Info</li>
<li>overrides for set data</li>
<li>IP Restriction Info</li>
<li>getAssignedParticipants()</li>
<li><em>Set/Course/Participant</em>

<ul>
<li>overrides for set course data</li>
<li>getSetGrade()</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>Problem</strong>

<ul>
<li>id</li>
<li>.PG info</li>
</ul>
</li>
<li><strong>Problem Pool</strong>

<ul>
<li>tags</li>
<li>problems</li>
<li>get random problems()</li>
<li>get unique problem()</li>
</ul>
</li>
<li><strong>Team</strong>

<ul>
<li>student (list)</li>
<li>description</li>
<li>course</li>
<li>grade</li>
</ul>
</li>
<li><strong>Attempt</strong>

<ul>
<li>time</li>
<li>score</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMWare support coming to Vagrant]]></title>
    <link href="http://whytheplatypus.github.com/blog/2013/03/14/vmware-support-coming-to-vagrant/"/>
    <updated>2013-03-14T17:14:00-04:00</updated>
    <id>http://whytheplatypus.github.com/blog/2013/03/14/vmware-support-coming-to-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/58059557">Looks like VMWare support</a> is coming to <a href="http://www.vagrantup.com/">Vagrant</a>.</p>

<p><a href="http://www.vagrantup.com/">Vagrant</a> was mentioned on WeBWorK&#8217;s devel list awhile back as a possiblilty for easy dev installs for our developers.  At the time I looked at it and decided against putting energy into it because I thought VitrualBox was kind of clunky (I have no argument or evidence to support that by the wayâ€¦) and the stand alone DMG we had worked well enough for a quick mac dev distro.<br/>
I&#8217;ve been using VMWare to play with SmartOS for awhile, I&#8217;ve also got a couple ubuntu WeBWorK installs on it, and I really like it so far.</p>

<p>If <a href="http://www.vagrantup.com/">Vagrant</a> is going to support it and, possibly even more exciting, <a href="http://www.hashicorp.com/blog/preview-vagrant-aws.html">cloud options</a> I think it could become an extreamly useful tool for WeBWorK developers and maybe even for the folks managing WeBWorK installs around the world.</p>

<p>It looks like these new features are set to land sometime in the middle of March, so I&#8217;ll keep an eye on it and hopfull have some setups for WeBWorK soon after it&#8217;s available.</p>

<p>~WhyThePlatypus</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openwebwork at Raleigh]]></title>
    <link href="http://whytheplatypus.github.com/blog/2013/03/13/openwebwork-at-raleigh/"/>
    <updated>2013-03-13T15:38:00-04:00</updated>
    <id>http://whytheplatypus.github.com/blog/2013/03/13/openwebwork-at-raleigh</id>
    <content type="html"><![CDATA[<p>We just finished up another webwork code camp, WeBWorK::Raleigh::2013.<br/>
It&#8217;s always such a blast, especially when we get to work in such a nice environment. The NC State math building is fantastic.</p>

<p>We&#8217;re trying out a new workflow based on <a href="https://github.com/nvie/gitflow">git flow</a> that Djun Kim and Davide Cervone put together.  There should be a write up for it up on the <a href="http://webwork.maa.org/wiki/Main_Page">wiki</a> in the next few days if there aren&#8217;t already.  It looks like it will be much easier to maintain&#8230; of course coming from what we were doing that&#8217;s not a hard sell.</p>

<p>The main thing I&#8217;m excited about is getting a new WeBWorK API written down.  If we can standardise how we send requests and what data we&#8217;re guarenteed to get back then a new back end and as many apps and tools that tie into it as we want wont be far behind.</p>

<p>Here&#8217;s the <a href="https://github.com/openwebwork/WeBWorK-API">API so far</a>. Any and all pull requests, forks, and suggestions help!  The idea is to specify what the request and response will be at a minimum so that applications can use it knowing what to expect at the least, but without limiting them to only what&#8217;s in the API.</p>

<p>oh! Djun also set up <a href="http://openwebwork.org">openwebwork.org</a>.  It&#8217;s really nice to have a good looking face for the project :)</p>

<p>~WhyThePlatypus</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up mDNS on SmartOS]]></title>
    <link href="http://whytheplatypus.github.com/blog/2013/02/01/setting-up-mdns-on-smartos/"/>
    <updated>2013-02-01T09:36:00-05:00</updated>
    <id>http://whytheplatypus.github.com/blog/2013/02/01/setting-up-mdns-on-smartos</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working with smartOS alot through VMWare Fusion on my macbook.  I was getting sick of looking up IP addresses so I poked around and sure enough mdns was there the whole time..</p>

<p>It took me a bit to figure out how to enable it on the VMs, turns out it&#8217;s straightforward. Just running this in a VM should do it.</p>

<script src="https://gist.github.com/whytheplatypus/4692693.js"></script>


<p>I also put together a quick script to let me make and name new nodes quickly.</p>

<script src="https://gist.github.com/whytheplatypus/4692705.js"></script>


<p>enjoy!</p>

<p>~WhyThePlatypus</p>
]]></content>
  </entry>
  
</feed>
